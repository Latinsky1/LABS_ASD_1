#include <SFML/Graphics.hpp>
#include <iostream>
#include <cmath>
#include <vector>
#include <set>
#include <array>
#include <cstdlib>
#include <ctime>
#define M_PI 3.141592653589793

using namespace std;
using namespace sf;

const int vertexCount = 5;
const float nodeRadius = 40.f;

const array<pair<int, int>, 9> connections = { {
    {1, 2}, {1, 3}, {1, 4}, {2, 3}, {3, 2}, {3, 4}, {4, 3}, {4, 5}, {5, 1}
} };

const array<Color, 9> arrowColors = {
    Color(255, 0, 0),
    Color(0, 255, 0),
    Color(0, 0, 255),
    Color(255, 255, 0),
    Color(0, 255, 255),
    Color(255, 0, 255),
    Color(255, 165, 0),
    Color(128, 0, 128),
    Color(0, 128, 0)
};

Color getRandomColor() {
    return arrowColors[rand() % arrowColors.size()];
}

const array<Vector2f, vertexCount> calculatePentagonPositions(float centerX, float centerY, float radius) {
    array<Vector2f, vertexCount> positions;
    float angleStep = 2 * M_PI / vertexCount;
    float startAngle = -M_PI / 2;

    for (int i = 0; i < vertexCount; ++i) {
        float angle = startAngle + i * angleStep;
        positions[i] = {
            centerX + radius * cos(angle),
            centerY + radius * sin(angle)
        };
    }

    return positions;
}

void drawGraph(const array<Vector2f, vertexCount>& customPositions) {
    RenderWindow window(VideoMode(1000, 1000), "Graphs");
    Font font;
    font.loadFromFile("Arial.ttf");

    Texture arrowTexture;
    arrowTexture.loadFromFile("strela.png");

    CircleShape nodes[vertexCount];
    Text labels[vertexCount];
    Vector2f positions[vertexCount];

    srand(time(nullptr));

    int colorIndex = 0;
    for (int i = 0; i < vertexCount; ++i) {
        positions[i] = customPositions[i];

        nodes[i].setRadius(nodeRadius);
        nodes[i].setOutlineColor(Color::Red);
        nodes[i].setOutlineThickness(3);
        nodes[i].setPosition(positions[i] - Vector2f(nodeRadius, nodeRadius));

        labels[i].setFont(font);
        labels[i].setString(to_string(i + 1));
        labels[i].setCharacterSize(39);
        labels[i].setFillColor(Color::Red);
        labels[i].setPosition(positions[i] - Vector2f(nodeRadius / 3, nodeRadius / 1.5));
    }

    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
        }

        window.clear(Color::White);

        for (const auto& connection : connections) {
            Vector2f start = positions[connection.first - 1];
            Vector2f end = positions[connection.second - 1];
            float edgeLength = sqrt(pow(end.x - start.x, 2) + pow(end.y - start.y, 2));

            RectangleShape arrow(Vector2f(edgeLength - 40, 70.0f));
            arrow.setTexture(&arrowTexture);
            arrow.setPosition(start);
            arrow.setOrigin(0, 35);
            arrow.setRotation(atan2(end.y - start.y, end.x - start.x) * 180 / M_PI);

            arrow.setFillColor(arrowColors[colorIndex]);

            window.draw(arrow);

            colorIndex = (colorIndex + 1) % arrowColors.size();
        }

        for (int i = 0; i < vertexCount; ++i) {
            window.draw(nodes[i]);
            window.draw(labels[i]);
        }

        window.display();
    }
}

void printEdgeList() {
    cout << "Список ребер\n";
    for (const auto& connection : connections) {
        cout << "(" << connection.first << ", " << connection.second << ") ";
    }
    cout << endl << endl;
}

void printAdjacencyMatrix() {
    bool adjacency[vertexCount][vertexCount] = { false };

    for (const auto& connection : connections) {
        int from = connection.first - 1;
        int to = connection.second - 1;
        adjacency[from][to] = true;
    }

    cout << "Матрица смежности\n";
    cout << "   ";
    for (int i = 0; i < vertexCount; i++) cout << i + 1 << " ";
    cout << endl;

    for (int i = 0; i < vertexCount; i++) {
        cout << i + 1 << ": ";
        for (int j = 0; j < vertexCount; j++) {
            cout << adjacency[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

void printAdjacencyList() {
    vector<int> adjacencyList[vertexCount];

    for (const auto& connection : connections) {
        int from = connection.first - 1;
        int to = connection.second - 1;
        adjacencyList[from].push_back(to);
    }

    cout << "Список смежности\n";
    for (int i = 0; i < vertexCount; i++) {
        cout << i + 1 << ": ";
        for (int neighbor : adjacencyList[i]) {
            cout << neighbor + 1 << " ";
        }
        cout << endl;
    }
    cout << endl;
}

int main() {
    setlocale(LC_ALL, "Rus");

    float centerX = 500.f;
    float centerY = 500.f;
    float radius = 300.f;

    const array<Vector2f, vertexCount> pentagonPositions = calculatePentagonPositions(centerX, centerY, radius);

    drawGraph(pentagonPositions);
    printEdgeList();
    printAdjacencyMatrix();
    printAdjacencyList();

    return 0;
}
